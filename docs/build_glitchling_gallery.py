"""Generate a documentation page showcasing glitchling outputs at multiple rates."""
from __future__ import annotations

import argparse
from dataclasses import dataclass
from pathlib import Path
import sys
from typing import Iterable, Sequence

# Ensure the project package is importable when the script runs from a clone.
REPO_ROOT = Path(__file__).resolve().parents[1]
SRC_PATH = REPO_ROOT / "src"
if str(SRC_PATH) not in sys.path:
    sys.path.insert(0, str(SRC_PATH))

from glitchlings import SAMPLE_TEXT  # type: ignore  # pylint: disable=wrong-import-position
from glitchlings.zoo import BUILTIN_GLITCHLINGS, Glitchling  # type: ignore  # pylint: disable=wrong-import-position


@dataclass(frozen=True)
class RateSpec:
    """Human-readable label paired with the numerical rate value."""

    label: str
    value: float


DEFAULT_RATES: tuple[RateSpec, ...] = (
    RateSpec("1%", 0.01),
    RateSpec("5%", 0.05),
    RateSpec("10%", 0.10),
    RateSpec("25%", 0.25),
)
DEFAULT_SEED = 404
DEFAULT_OUTPUT = REPO_ROOT / "docs" / "glitchling-gallery.md"


class GalleryGenerationError(RuntimeError):
    """Raised when a glitchling cannot provide a sample output."""


def _instantiate_glitchling(
    glitchling: Glitchling,
    *,
    rate: float,
    seed: int,
) -> Glitchling:
    """Return a fresh glitchling instance configured for the gallery."""

    glitchling_type = type(glitchling)
    try:
        return glitchling_type(rate=rate, seed=seed)
    except TypeError as exc:  # pragma: no cover - defensive guard
        raise GalleryGenerationError(
            f"Failed to configure {glitchling.name} with rate={rate:.2%}: {exc}"
        ) from exc


def _render_sample(
    glitchling: Glitchling,
    *,
    rate_label: str,
    rate_value: float,
    seed: int,
    sample_text: str,
) -> str:
    """Run the glitchling and format the sample output or failure notice."""

    try:
        configured = _instantiate_glitchling(glitchling, rate=rate_value, seed=seed)
        corrupted = configured(sample_text)
    except Exception as exc:  # pylint: disable=broad-except
        message = (
            "⚠️ Unable to generate output. "
            "Ensure optional dependencies are installed if required.\n\n"
            f"> {exc}"
        )
        return f"### {rate_label} corruption\n\n{message}\n"

    escaped = corrupted.replace("```", "`\u200b``")
    return (
        f"### {rate_label} corruption\n\n"
        "```text\n"
        f"{escaped}\n"
        "```\n"
    )


def build_gallery_content(
    *,
    rates: Sequence[RateSpec] = DEFAULT_RATES,
    seed: int = DEFAULT_SEED,
    sample_text: str = SAMPLE_TEXT,
) -> str:
    """Create the full Markdown document for the glitchling gallery."""

    header = (
        "# Glitchling Gallery\n\n"
        "This page is generated by `docs/build_glitchling_gallery.py` and showcases "
        "each available glitchling running on the shared sample text at four "
        "different corruption rates. Use the script to refresh the gallery after "
        "tweaking glitchling behaviour.\n\n"
        "**Base sample text**\n\n"
        "```text\n"
        f"{sample_text}\n"
        "```\n\n"
        f"All examples use a base seed of `{seed}` with per-glitchling offsets to keep "
        "results deterministic across runs.\n\n"
    )

    glitchlings: Iterable[Glitchling] = (
        BUILTIN_GLITCHLINGS[name]
        for name in sorted(BUILTIN_GLITCHLINGS)
    )

    sections: list[str] = [header]
    for index, glitchling in enumerate(glitchlings):
        sections.append(f"## {glitchling.name}\n\n")
        seed_offset = index * 1000
        for rate in rates:
            sections.append(
                _render_sample(
                    glitchling,
                    rate_label=rate.label,
                    rate_value=rate.value,
                    seed=seed + seed_offset + int(rate.value * 100),
                    sample_text=sample_text,
                )
            )
        sections.append("\n")

    return "".join(sections)


def parse_args(argv: Sequence[str] | None = None) -> argparse.Namespace:
    """Parse CLI arguments."""

    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument(
        "--output",
        type=Path,
        default=DEFAULT_OUTPUT,
        help=(
            "Destination Markdown file. Defaults to docs/glitchling-gallery.md "
            "inside the repository."
        ),
    )
    parser.add_argument(
        "--seed",
        type=int,
        default=DEFAULT_SEED,
        help="Base seed used to derive per-glitchling deterministic outputs.",
    )
    return parser.parse_args(argv)


def main(argv: Sequence[str] | None = None) -> None:
    """Entry point for the gallery generation script."""

    args = parse_args(argv)
    output: Path = args.output
    if not output.is_absolute():
        output = REPO_ROOT / output
    output.parent.mkdir(parents=True, exist_ok=True)

    content = build_gallery_content(seed=args.seed)
    output.write_text(content, encoding="utf-8")
    relative = output.relative_to(REPO_ROOT)
    print(f"Wrote {relative}")


if __name__ == "__main__":
    main()
