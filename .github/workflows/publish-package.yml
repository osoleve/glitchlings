name: Build and publish package

on:
  workflow_call:
    inputs:
      environment:
        description: Target deployment environment name
        required: true
        type: string
      repository-url:
        description: Package index repository URL
        required: true
        type: string
      skip-existing:
        description: Skip uploading artifacts that already exist
        required: false
        default: true
        type: boolean

permissions:
  contents: read

jobs:
  build-windows:
    runs-on: windows-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable

      - name: Pin Python for PyO3
        shell: bash
        run: echo "PYO3_PYTHON=$(python -c 'import sys; print(sys.executable)')" >> "$GITHUB_ENV"

      - name: Install build dependencies
        shell: bash
        run: |
          python -m pip install --upgrade pip
          pip install build setuptools-rust

      - name: Build distributions
        shell: bash
        run: python -m build

      - name: Upload distributions
        uses: actions/upload-artifact@v4
        with:
          name: dist-windows
          path: dist/

  build-linux:
    runs-on: ubuntu-latest
    container:
      image: quay.io/pypa/manylinux_2_28_x86_64:latest
    strategy:
      matrix:
        python-version: ['cp310-cp310', 'cp311-cp311', 'cp312-cp312']

    steps:
      - uses: actions/checkout@v4

      - name: Install Rust toolchain
        run: |
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Build wheel
        run: |
          export PATH="$HOME/.cargo/bin:$PATH"
          /opt/python/${{ matrix.python-version }}/bin/pip install --upgrade pip build setuptools-rust
          /opt/python/${{ matrix.python-version }}/bin/python -m build --wheel

      - name: Repair wheel with auditwheel
        run: |
          auditwheel repair dist/*.whl -w dist-repaired
          rm dist/*.whl
          mv dist-repaired/* dist/

      - name: Upload distributions
        uses: actions/upload-artifact@v4
        with:
          name: dist-linux-${{ matrix.python-version }}
          path: dist/

  build-macos:
    runs-on: macos-latest
    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12']

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable

      - name: Pin Python for PyO3
        shell: bash
        run: echo "PYO3_PYTHON=$(python -c 'import sys; print(sys.executable)')" >> "$GITHUB_ENV"

      - name: Install build dependencies
        shell: bash
        run: |
          python -m pip install --upgrade pip
          pip install build setuptools-rust

      - name: Build distributions
        shell: bash
        run: python -m build --wheel

      - name: Upload distributions
        uses: actions/upload-artifact@v4
        with:
          name: dist-macos-${{ matrix.python-version }}
          path: dist/

  publish:
    runs-on: ubuntu-latest
    needs: [build-windows, build-linux, build-macos]
    environment:
      name: ${{ inputs.environment }}
    steps:
      - uses: actions/download-artifact@v4
        with:
          pattern: dist-*
          path: dist
          merge-multiple: true

      - name: Publish to package index
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: ${{ inputs.repository-url }}
          packages-dir: dist
          user: __token__
          skip-existing: ${{ inputs.skip-existing }}
