name: Publish to TestPyPI

on:
  push:
    branches:
      - test
  workflow_dispatch:

permissions:
  contents: read
  id-token: write

jobs:
  build:
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest]
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install Rust toolchain (Windows)
        if: runner.os == 'Windows'
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable

      - name: Install build tooling (Windows)
        if: runner.os == 'Windows'
        shell: bash
        run: |
          python -m pip install --upgrade pip cibuildwheel

      - name: Build Windows wheel
        if: runner.os == 'Windows'
        shell: bash
        env:
          CIBW_BUILD: cp312-win_amd64
        run: python -m cibuildwheel --output-dir dist

      - name: Install build tooling (Linux)
        if: runner.os == 'Linux'
        shell: bash
        run: |
          python -m pip install --upgrade pip cibuildwheel build

      - name: Build manylinux wheel
        if: runner.os == 'Linux'
        shell: bash
        env:
          CIBW_BUILD: cp312-manylinux_x86_64
          CIBW_BEFORE_BUILD_LINUX: >
            curl https://sh.rustup.rs -sSf | sh -s -- -y --profile minimal --default-toolchain stable &&
            . "$HOME/.cargo/env"
          CIBW_ENVIRONMENT_LINUX: PATH="$HOME/.cargo/bin:$PATH" PYO3_PYTHON="/opt/python/cp312-cp312/bin/python"
        run: python -m cibuildwheel --output-dir wheelhouse

      - name: Build sdist
        if: runner.os == 'Linux'
        shell: bash
        run: python -m build --sdist --outdir dist

      - name: Collect Linux artifacts
        if: runner.os == 'Linux'
        shell: bash
        run: |
          mkdir -p dist
          cp wheelhouse/*.whl dist/

      - name: Upload distributions
        uses: actions/upload-artifact@v4
        with:
          name: dist-${{ matrix.os }}
          path: dist/

  publish:
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: testpypi
    steps:
      - uses: actions/download-artifact@v4
        with:
          pattern: dist-*
          path: dist
          merge-multiple: true

      - name: Publish to TestPyPI with API token
        if: ${{ secrets.TEST_PYPI_API_TOKEN != '' }}
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/
          packages-dir: dist
          user: __token__
          password: ${{ secrets.TEST_PYPI_API_TOKEN }}
          skip-existing: true

      - name: Publish to TestPyPI via Trusted Publishing
        if: ${{ secrets.TEST_PYPI_API_TOKEN == '' }}
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/
          packages-dir: dist
          user: __token__
          skip-existing: true

