name: Build & Publish (TestPyPI)

on:
  push:
    branches:
      - dev
  workflow_dispatch:

permissions:
  contents: read
  id-token: write

jobs:
  build-wheels:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
      - uses: actions/checkout@v4

      # Ensure Rust is installed on all OS runners
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable

      - name: Add macOS target (macOS only)
        if: matrix.os == 'macos-latest'
        run: rustup target add x86_64-apple-darwin

      - name: Verify Rust toolchain
        run: |
          rustc --version
          which rustc

      - name: Add Cargo bin to PATH (Unix)
        if: matrix.os != 'windows-latest'
        run: echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Add Cargo bin to PATH (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          $cargoBin = Join-Path $env:USERPROFILE '.cargo\bin'
          $cargoBin | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install Python development headers
        if: matrix.os == 'ubuntu-latest'
        run: sudo apt-get update && sudo apt-get install -y python3.12-dev

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build cibuildwheel setuptools-rust

      - name: Build wheels
        run: python -m cibuildwheel --output-dir dist
        env:
          # Ensure Rust is visible inside cibuildwheel
          CIBW_ENVIRONMENT: >
            GLITCHLINGS_RUST_PIPELINE=1
            PYO3_PYTHON=$(python -c "import sys; print(sys.executable)")
          CIBW_BUILD: "cp312-*"
          CIBW_SKIP: "*-win32"
          CIBW_TEST_COMMAND: "python -m nltk.downloader wordnet && pytest -q {project}/tests"
          CIBW_TEST_EXTRAS: "dev"
          CIBW_TEST_REQUIRES: "pytest nltk"
          CIBW_ARCHS_MACOS: "x86_64 arm64 universal2"
          CIBW_BEFORE_ALL_LINUX: "curl https://sh.rustup.rs -sSf | sh -s -- -y --profile minimal --default-toolchain stable"
          CIBW_ENVIRONMENT_LINUX: "PATH=/root/.cargo/bin:$PATH CARGO_HOME=/root/.cargo"

      - name: Build source distribution
        run: python -m build --sdist

      - uses: actions/upload-artifact@v4
        with:
          name: dist-${{ matrix.os }}
          path: dist/*

  publish:
    needs: build-wheels
    runs-on: ubuntu-latest
    environment:
      name: testpypi
    steps:
      - uses: actions/download-artifact@v4
        with:
          path: dist
          pattern: dist-*
          merge-multiple: true

      - name: Publish to TestPyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/
          packages-dir: dist
          user: __token__
          password: ${{ secrets.TEST_PYPI_API_TOKEN }}
          skip-existing: true

